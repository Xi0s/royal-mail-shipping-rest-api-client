<?php
/**
 * CreateShipmentShipmentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\Shipping\Rest\Api\models;

use \ArrayAccess;
use \RoyalMail\Shipping\Rest\Api\ObjectSerializer;

/**
 * CreateShipmentShipmentInformation Class Doc Comment
 *
 * @category Class
 * @description Shipment Information. Overall package details, item details and requested service information in a shipment request.&lt;br /&gt; It is important to ensure accurate information is supplied to ensure correct handling by different customs around the world.
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateShipmentShipmentInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateShipment.ShipmentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipmentDate' => '\DateTime',
'serviceCode' => 'string',
'serviceOptions' => '\RoyalMail\Shipping\Rest\Api\models\CreateShipmentServiceOptions',
'totalPackages' => 'int',
'totalWeight' => 'double',
'weightUnitOfMeasure' => 'string',
'product' => 'string',
'descriptionOfGoods' => 'string',
'reasonForExport' => 'string',
'value' => 'double',
'currency' => 'string',
'labelFormat' => 'string',
'silentPrintProfile' => 'string',
'shipmentAction' => 'string',
'packages' => '\RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipmentPackage[]',
'items' => '\RoyalMail\Shipping\Rest\Api\models\ShipmentItem[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipmentDate' => 'date',
'serviceCode' => null,
'serviceOptions' => null,
'totalPackages' => 'int32',
'totalWeight' => 'double',
'weightUnitOfMeasure' => null,
'product' => null,
'descriptionOfGoods' => null,
'reasonForExport' => null,
'value' => 'double',
'currency' => null,
'labelFormat' => null,
'silentPrintProfile' => 'uuid',
'shipmentAction' => null,
'packages' => null,
'items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentDate' => 'ShipmentDate',
'serviceCode' => 'ServiceCode',
'serviceOptions' => 'ServiceOptions',
'totalPackages' => 'TotalPackages',
'totalWeight' => 'TotalWeight',
'weightUnitOfMeasure' => 'WeightUnitOfMeasure',
'product' => 'Product',
'descriptionOfGoods' => 'DescriptionOfGoods',
'reasonForExport' => 'ReasonForExport',
'value' => 'Value',
'currency' => 'Currency',
'labelFormat' => 'LabelFormat',
'silentPrintProfile' => 'SilentPrintProfile',
'shipmentAction' => 'ShipmentAction',
'packages' => 'Packages',
'items' => 'Items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentDate' => 'setShipmentDate',
'serviceCode' => 'setServiceCode',
'serviceOptions' => 'setServiceOptions',
'totalPackages' => 'setTotalPackages',
'totalWeight' => 'setTotalWeight',
'weightUnitOfMeasure' => 'setWeightUnitOfMeasure',
'product' => 'setProduct',
'descriptionOfGoods' => 'setDescriptionOfGoods',
'reasonForExport' => 'setReasonForExport',
'value' => 'setValue',
'currency' => 'setCurrency',
'labelFormat' => 'setLabelFormat',
'silentPrintProfile' => 'setSilentPrintProfile',
'shipmentAction' => 'setShipmentAction',
'packages' => 'setPackages',
'items' => 'setItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentDate' => 'getShipmentDate',
'serviceCode' => 'getServiceCode',
'serviceOptions' => 'getServiceOptions',
'totalPackages' => 'getTotalPackages',
'totalWeight' => 'getTotalWeight',
'weightUnitOfMeasure' => 'getWeightUnitOfMeasure',
'product' => 'getProduct',
'descriptionOfGoods' => 'getDescriptionOfGoods',
'reasonForExport' => 'getReasonForExport',
'value' => 'getValue',
'currency' => 'getCurrency',
'labelFormat' => 'getLabelFormat',
'silentPrintProfile' => 'getSilentPrintProfile',
'shipmentAction' => 'getShipmentAction',
'packages' => 'getPackages',
'items' => 'getItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WEIGHT_UNIT_OF_MEASURE_KG = 'KG';
const WEIGHT_UNIT_OF_MEASURE_GRAMS = 'Grams';
const PRODUCT_NDX = 'NDX';
const PRODUCT_DOX = 'DOX';
const LABEL_FORMAT_PDF = 'PDF';
const LABEL_FORMAT_PNG = 'PNG';
const LABEL_FORMAT_DATASTREAM = 'DATASTREAM';
const LABEL_FORMAT_ZPL203_DPI = 'ZPL203DPI';
const LABEL_FORMAT_ZPL300_DPI = 'ZPL300DPI';
const SHIPMENT_ACTION_PROCESS = 'Process';
const SHIPMENT_ACTION_ALLOCATE = 'Allocate';
const SHIPMENT_ACTION_CREATE = 'Create';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUnitOfMeasureAllowableValues()
    {
        return [
            self::WEIGHT_UNIT_OF_MEASURE_KG,
self::WEIGHT_UNIT_OF_MEASURE_GRAMS,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductAllowableValues()
    {
        return [
            self::PRODUCT_NDX,
self::PRODUCT_DOX,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelFormatAllowableValues()
    {
        return [
            self::LABEL_FORMAT_PDF,
self::LABEL_FORMAT_PNG,
self::LABEL_FORMAT_DATASTREAM,
self::LABEL_FORMAT_ZPL203_DPI,
self::LABEL_FORMAT_ZPL300_DPI,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentActionAllowableValues()
    {
        return [
            self::SHIPMENT_ACTION_PROCESS,
self::SHIPMENT_ACTION_ALLOCATE,
self::SHIPMENT_ACTION_CREATE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipmentDate'] = isset($data['shipmentDate']) ? $data['shipmentDate'] : null;
        $this->container['serviceCode'] = isset($data['serviceCode']) ? $data['serviceCode'] : null;
        $this->container['serviceOptions'] = isset($data['serviceOptions']) ? $data['serviceOptions'] : null;
        $this->container['totalPackages'] = isset($data['totalPackages']) ? $data['totalPackages'] : null;
        $this->container['totalWeight'] = isset($data['totalWeight']) ? $data['totalWeight'] : null;
        $this->container['weightUnitOfMeasure'] = isset($data['weightUnitOfMeasure']) ? $data['weightUnitOfMeasure'] : 'KG';
        $this->container['product'] = isset($data['product']) ? $data['product'] : 'NDX';
        $this->container['descriptionOfGoods'] = isset($data['descriptionOfGoods']) ? $data['descriptionOfGoods'] : null;
        $this->container['reasonForExport'] = isset($data['reasonForExport']) ? $data['reasonForExport'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['labelFormat'] = isset($data['labelFormat']) ? $data['labelFormat'] : 'PDF';
        $this->container['silentPrintProfile'] = isset($data['silentPrintProfile']) ? $data['silentPrintProfile'] : null;
        $this->container['shipmentAction'] = isset($data['shipmentAction']) ? $data['shipmentAction'] : 'Process';
        $this->container['packages'] = isset($data['packages']) ? $data['packages'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipmentDate'] === null) {
            $invalidProperties[] = "'shipmentDate' can't be null";
        }
        if ($this->container['serviceCode'] === null) {
            $invalidProperties[] = "'serviceCode' can't be null";
        }
        if ($this->container['totalPackages'] === null) {
            $invalidProperties[] = "'totalPackages' can't be null";
        }
        if ($this->container['totalWeight'] === null) {
            $invalidProperties[] = "'totalWeight' can't be null";
        }
        $allowedValues = $this->getWeightUnitOfMeasureAllowableValues();
        if (!is_null($this->container['weightUnitOfMeasure']) && !in_array($this->container['weightUnitOfMeasure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weightUnitOfMeasure', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProductAllowableValues();
        if (!is_null($this->container['product']) && !in_array($this->container['product'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLabelFormatAllowableValues();
        if (!is_null($this->container['labelFormat']) && !in_array($this->container['labelFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'labelFormat', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentActionAllowableValues();
        if (!is_null($this->container['shipmentAction']) && !in_array($this->container['shipmentAction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipmentAction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentDate
     *
     * @return \DateTime
     */
    public function getShipmentDate()
    {
        return $this->container['shipmentDate'];
    }

    /**
     * Sets shipmentDate
     *
     * @param \DateTime $shipmentDate Shipment Date<br />Date of despatch - YYYY-MM-DD.<br />Cannot be in the past. Max 28 days in the future.
     *
     * @return $this
     */
    public function setShipmentDate($shipmentDate)
    {
        $this->container['shipmentDate'] = $shipmentDate;

        return $this;
    }

    /**
     * Gets serviceCode
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['serviceCode'];
    }

    /**
     * Sets serviceCode
     *
     * @param string $serviceCode Service Code<br />Must be a valid system service code OR a customer mapped service code.
     *
     * @return $this
     */
    public function setServiceCode($serviceCode)
    {
        $this->container['serviceCode'] = $serviceCode;

        return $this;
    }

    /**
     * Gets serviceOptions
     *
     * @return \RoyalMail\Shipping\Rest\Api\models\CreateShipmentServiceOptions
     */
    public function getServiceOptions()
    {
        return $this->container['serviceOptions'];
    }

    /**
     * Sets serviceOptions
     *
     * @param \RoyalMail\Shipping\Rest\Api\models\CreateShipmentServiceOptions $serviceOptions serviceOptions
     *
     * @return $this
     */
    public function setServiceOptions($serviceOptions)
    {
        $this->container['serviceOptions'] = $serviceOptions;

        return $this;
    }

    /**
     * Gets totalPackages
     *
     * @return int
     */
    public function getTotalPackages()
    {
        return $this->container['totalPackages'];
    }

    /**
     * Sets totalPackages
     *
     * @param int $totalPackages Number of Packages<br />The total number of packages.
     *
     * @return $this
     */
    public function setTotalPackages($totalPackages)
    {
        $this->container['totalPackages'] = $totalPackages;

        return $this;
    }

    /**
     * Gets totalWeight
     *
     * @return double
     */
    public function getTotalWeight()
    {
        return $this->container['totalWeight'];
    }

    /**
     * Sets totalWeight
     *
     * @param double $totalWeight Total Weight<br />The total weight of the shipment including packaging. Validated againt package weight.<br />Min weight: 1 gram.     <br />*Optional/Overwritten for Average Weight Services - Average Weight Customers only.*
     *
     * @return $this
     */
    public function setTotalWeight($totalWeight)
    {
        $this->container['totalWeight'] = $totalWeight;

        return $this;
    }

    /**
     * Gets weightUnitOfMeasure
     *
     * @return string
     */
    public function getWeightUnitOfMeasure()
    {
        return $this->container['weightUnitOfMeasure'];
    }

    /**
     * Sets weightUnitOfMeasure
     *
     * @param string $weightUnitOfMeasure Weight Unit of Measure
     *
     * @return $this
     */
    public function setWeightUnitOfMeasure($weightUnitOfMeasure)
    {
        $allowedValues = $this->getWeightUnitOfMeasureAllowableValues();
        if (!is_null($weightUnitOfMeasure) && !in_array($weightUnitOfMeasure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weightUnitOfMeasure', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weightUnitOfMeasure'] = $weightUnitOfMeasure;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product Shipment/Product type being shipped<br />            <br />**DOX** - Documents Only<br />**NDX** - All other shipment product types
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $allowedValues = $this->getProductAllowableValues();
        if (!is_null($product) && !in_array($product, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets descriptionOfGoods
     *
     * @return string
     */
    public function getDescriptionOfGoods()
    {
        return $this->container['descriptionOfGoods'];
    }

    /**
     * Sets descriptionOfGoods
     *
     * @param string $descriptionOfGoods Description of Goods<br />General description of the goods being sent.<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.
     *
     * @return $this
     */
    public function setDescriptionOfGoods($descriptionOfGoods)
    {
        $this->container['descriptionOfGoods'] = $descriptionOfGoods;

        return $this;
    }

    /**
     * Gets reasonForExport
     *
     * @return string
     */
    public function getReasonForExport()
    {
        return $this->container['reasonForExport'];
    }

    /**
     * Sets reasonForExport
     *
     * @param string $reasonForExport Reason For Export<br />Required for International Shipments and BFPO (British Forces Post Office).
     *
     * @return $this
     */
    public function setReasonForExport($reasonForExport)
    {
        $this->container['reasonForExport'] = $reasonForExport;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double $value Total Shipment Value<br />Required for Non-Document International and BFPO Shipments.<br />Ignored for Documents Only shipments.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency<br />This currency will be used for all values across the shipment request.<br />3 digit ISO Currency Code.<br />Required for Non-Document International and BFPO Shipments, or when values are provided.<br />Ignored for Documents Only shipments.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets labelFormat
     *
     * @return string
     */
    public function getLabelFormat()
    {
        return $this->container['labelFormat'];
    }

    /**
     * Sets labelFormat
     *
     * @param string $labelFormat Requested Label Format<br />*DATASTREAM is only available if it has been activated on your account.*<br />Ignored if ShipmentAction set to Create or Allocate.
     *
     * @return $this
     */
    public function setLabelFormat($labelFormat)
    {
        $allowedValues = $this->getLabelFormatAllowableValues();
        if (!is_null($labelFormat) && !in_array($labelFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'labelFormat', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['labelFormat'] = $labelFormat;

        return $this;
    }

    /**
     * Gets silentPrintProfile
     *
     * @return string
     */
    public function getSilentPrintProfile()
    {
        return $this->container['silentPrintProfile'];
    }

    /**
     * Sets silentPrintProfile
     *
     * @param string $silentPrintProfile Silent Print Profile<br />If present, resulting labels will be printed using this profile.
     *
     * @return $this
     */
    public function setSilentPrintProfile($silentPrintProfile)
    {
        $this->container['silentPrintProfile'] = $silentPrintProfile;

        return $this;
    }

    /**
     * Gets shipmentAction
     *
     * @return string
     */
    public function getShipmentAction()
    {
        return $this->container['shipmentAction'];
    }

    /**
     * Sets shipmentAction
     *
     * @param string $shipmentAction Shipment Action<br />            <br />**Process** - Shipment created and processed, ready for manifesting. Label and tracking number returned.<br />            <br />**Create** - Shipment created as unprocessed, ready for scanning. Scanning will create label and tracking number and move shipment to processed.<br />            <br />**Allocate** - Shipment created as unprocessed with tracking number allocated and returned and label created but not returned. Scanning will return label and move shipment to processed.
     *
     * @return $this
     */
    public function setShipmentAction($shipmentAction)
    {
        $allowedValues = $this->getShipmentActionAllowableValues();
        if (!is_null($shipmentAction) && !in_array($shipmentAction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipmentAction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipmentAction'] = $shipmentAction;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipmentPackage[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \RoyalMail\Shipping\Rest\Api\models\CreateShipmentShipmentPackage[] $packages Shipment Packages<br />The packages in the shipment.<br />Required if TotalPackages is more than 1.
     *
     * @return $this
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \RoyalMail\Shipping\Rest\Api\models\ShipmentItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \RoyalMail\Shipping\Rest\Api\models\ShipmentItem[] $items Shipment Items<br />The items in the shipment.<br />Required for Non-Document International Shipments and BFPO (British Forces Post Office).<br />Ignored for Documents Only shipments.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
