<?php
/**
 * PrintLabelResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * This API specification details the requirements for integrating with **Royal Mail API Shipping V3**.<br><br>It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.<br><br>Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail.<br><br>Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.<br><br>This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\Shipping\Rest\Api\models;

use \ArrayAccess;
use \RoyalMail\Shipping\Rest\Api\ObjectSerializer;

/**
 * PrintLabelResponse Class Doc Comment
 *
 * @category Class
 * @description Response from a print label request, containing the label if the request was successful.
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrintLabelResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrintLabelResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipmentId' => 'string',
'labelImage' => 'string',
'labelImageFormat' => 'string',
'trackingNumber' => 'string',
'uniqueId' => 'string',
'trackingUrl' => 'string',
'carrierCode' => 'string',
'primary2DBarcodeImage' => 'string',
'primary2DBarcodeData' => 'string',
'formattedUniqueId' => 'string',
'highVolumeBarcodeData' => 'string',
'highVolumeBarcodeImage' => 'string',
'highVolumeSortCode' => 'string',
'primary1DBarcodeData' => 'string',
'primary1DBarcodeImage' => 'string',
'returnLabelImageFormat' => 'string',
'returnLabelImage' => 'string',
'httpStatusCode' => 'int',
'httpStatusDescription' => 'string',
'message' => 'string',
'errors' => '\RoyalMail\Shipping\Rest\Api\models\ErrorDetail[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipmentId' => null,
'labelImage' => null,
'labelImageFormat' => null,
'trackingNumber' => null,
'uniqueId' => null,
'trackingUrl' => null,
'carrierCode' => null,
'primary2DBarcodeImage' => null,
'primary2DBarcodeData' => null,
'formattedUniqueId' => null,
'highVolumeBarcodeData' => null,
'highVolumeBarcodeImage' => null,
'highVolumeSortCode' => null,
'primary1DBarcodeData' => null,
'primary1DBarcodeImage' => null,
'returnLabelImageFormat' => null,
'returnLabelImage' => null,
'httpStatusCode' => 'int32',
'httpStatusDescription' => null,
'message' => null,
'errors' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentId' => 'ShipmentId',
'labelImage' => 'LabelImage',
'labelImageFormat' => 'LabelImageFormat',
'trackingNumber' => 'TrackingNumber',
'uniqueId' => 'UniqueId',
'trackingUrl' => 'TrackingUrl',
'carrierCode' => 'CarrierCode',
'primary2DBarcodeImage' => 'Primary2DBarcodeImage',
'primary2DBarcodeData' => 'Primary2DBarcodeData',
'formattedUniqueId' => 'FormattedUniqueId',
'highVolumeBarcodeData' => 'HighVolumeBarcodeData',
'highVolumeBarcodeImage' => 'HighVolumeBarcodeImage',
'highVolumeSortCode' => 'HighVolumeSortCode',
'primary1DBarcodeData' => 'Primary1DBarcodeData',
'primary1DBarcodeImage' => 'Primary1DBarcodeImage',
'returnLabelImageFormat' => 'ReturnLabelImageFormat',
'returnLabelImage' => 'ReturnLabelImage',
'httpStatusCode' => 'HttpStatusCode',
'httpStatusDescription' => 'HttpStatusDescription',
'message' => 'Message',
'errors' => 'Errors'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentId' => 'setShipmentId',
'labelImage' => 'setLabelImage',
'labelImageFormat' => 'setLabelImageFormat',
'trackingNumber' => 'setTrackingNumber',
'uniqueId' => 'setUniqueId',
'trackingUrl' => 'setTrackingUrl',
'carrierCode' => 'setCarrierCode',
'primary2DBarcodeImage' => 'setPrimary2DBarcodeImage',
'primary2DBarcodeData' => 'setPrimary2DBarcodeData',
'formattedUniqueId' => 'setFormattedUniqueId',
'highVolumeBarcodeData' => 'setHighVolumeBarcodeData',
'highVolumeBarcodeImage' => 'setHighVolumeBarcodeImage',
'highVolumeSortCode' => 'setHighVolumeSortCode',
'primary1DBarcodeData' => 'setPrimary1DBarcodeData',
'primary1DBarcodeImage' => 'setPrimary1DBarcodeImage',
'returnLabelImageFormat' => 'setReturnLabelImageFormat',
'returnLabelImage' => 'setReturnLabelImage',
'httpStatusCode' => 'setHttpStatusCode',
'httpStatusDescription' => 'setHttpStatusDescription',
'message' => 'setMessage',
'errors' => 'setErrors'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentId' => 'getShipmentId',
'labelImage' => 'getLabelImage',
'labelImageFormat' => 'getLabelImageFormat',
'trackingNumber' => 'getTrackingNumber',
'uniqueId' => 'getUniqueId',
'trackingUrl' => 'getTrackingUrl',
'carrierCode' => 'getCarrierCode',
'primary2DBarcodeImage' => 'getPrimary2DBarcodeImage',
'primary2DBarcodeData' => 'getPrimary2DBarcodeData',
'formattedUniqueId' => 'getFormattedUniqueId',
'highVolumeBarcodeData' => 'getHighVolumeBarcodeData',
'highVolumeBarcodeImage' => 'getHighVolumeBarcodeImage',
'highVolumeSortCode' => 'getHighVolumeSortCode',
'primary1DBarcodeData' => 'getPrimary1DBarcodeData',
'primary1DBarcodeImage' => 'getPrimary1DBarcodeImage',
'returnLabelImageFormat' => 'getReturnLabelImageFormat',
'returnLabelImage' => 'getReturnLabelImage',
'httpStatusCode' => 'getHttpStatusCode',
'httpStatusDescription' => 'getHttpStatusDescription',
'message' => 'getMessage',
'errors' => 'getErrors'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LABEL_IMAGE_FORMAT_PDF = 'PDF';
const LABEL_IMAGE_FORMAT_PNG = 'PNG';
const LABEL_IMAGE_FORMAT_DATASTREAM = 'DATASTREAM';
const LABEL_IMAGE_FORMAT_ZPL203_DPI = 'ZPL203DPI';
const LABEL_IMAGE_FORMAT_ZPL300_DPI = 'ZPL300DPI';
const RETURN_LABEL_IMAGE_FORMAT_PDF = 'PDF';
const RETURN_LABEL_IMAGE_FORMAT_PNG = 'PNG';
const RETURN_LABEL_IMAGE_FORMAT_ZPL300_DPI = 'ZPL300DPI';
const RETURN_LABEL_IMAGE_FORMAT_ZPL203_DPI = 'ZPL203DPI';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelImageFormatAllowableValues()
    {
        return [
            self::LABEL_IMAGE_FORMAT_PDF,
self::LABEL_IMAGE_FORMAT_PNG,
self::LABEL_IMAGE_FORMAT_DATASTREAM,
self::LABEL_IMAGE_FORMAT_ZPL203_DPI,
self::LABEL_IMAGE_FORMAT_ZPL300_DPI,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnLabelImageFormatAllowableValues()
    {
        return [
            self::RETURN_LABEL_IMAGE_FORMAT_PDF,
self::RETURN_LABEL_IMAGE_FORMAT_PNG,
self::RETURN_LABEL_IMAGE_FORMAT_ZPL300_DPI,
self::RETURN_LABEL_IMAGE_FORMAT_ZPL203_DPI,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipmentId'] = isset($data['shipmentId']) ? $data['shipmentId'] : null;
        $this->container['labelImage'] = isset($data['labelImage']) ? $data['labelImage'] : null;
        $this->container['labelImageFormat'] = isset($data['labelImageFormat']) ? $data['labelImageFormat'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['uniqueId'] = isset($data['uniqueId']) ? $data['uniqueId'] : null;
        $this->container['trackingUrl'] = isset($data['trackingUrl']) ? $data['trackingUrl'] : null;
        $this->container['carrierCode'] = isset($data['carrierCode']) ? $data['carrierCode'] : null;
        $this->container['primary2DBarcodeImage'] = isset($data['primary2DBarcodeImage']) ? $data['primary2DBarcodeImage'] : null;
        $this->container['primary2DBarcodeData'] = isset($data['primary2DBarcodeData']) ? $data['primary2DBarcodeData'] : null;
        $this->container['formattedUniqueId'] = isset($data['formattedUniqueId']) ? $data['formattedUniqueId'] : null;
        $this->container['highVolumeBarcodeData'] = isset($data['highVolumeBarcodeData']) ? $data['highVolumeBarcodeData'] : null;
        $this->container['highVolumeBarcodeImage'] = isset($data['highVolumeBarcodeImage']) ? $data['highVolumeBarcodeImage'] : null;
        $this->container['highVolumeSortCode'] = isset($data['highVolumeSortCode']) ? $data['highVolumeSortCode'] : null;
        $this->container['primary1DBarcodeData'] = isset($data['primary1DBarcodeData']) ? $data['primary1DBarcodeData'] : null;
        $this->container['primary1DBarcodeImage'] = isset($data['primary1DBarcodeImage']) ? $data['primary1DBarcodeImage'] : null;
        $this->container['returnLabelImageFormat'] = isset($data['returnLabelImageFormat']) ? $data['returnLabelImageFormat'] : null;
        $this->container['returnLabelImage'] = isset($data['returnLabelImage']) ? $data['returnLabelImage'] : null;
        $this->container['httpStatusCode'] = isset($data['httpStatusCode']) ? $data['httpStatusCode'] : null;
        $this->container['httpStatusDescription'] = isset($data['httpStatusDescription']) ? $data['httpStatusDescription'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLabelImageFormatAllowableValues();
        if (!is_null($this->container['labelImageFormat']) && !in_array($this->container['labelImageFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'labelImageFormat', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReturnLabelImageFormatAllowableValues();
        if (!is_null($this->container['returnLabelImageFormat']) && !in_array($this->container['returnLabelImageFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'returnLabelImageFormat', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['httpStatusCode'] === null) {
            $invalidProperties[] = "'httpStatusCode' can't be null";
        }
        if ($this->container['httpStatusDescription'] === null) {
            $invalidProperties[] = "'httpStatusDescription' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentId
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipmentId'];
    }

    /**
     * Sets shipmentId
     *
     * @param string $shipmentId Shipment Id<br />Tracking Number or Unique Id of the shipment involved.
     *
     * @return $this
     */
    public function setShipmentId($shipmentId)
    {
        $this->container['shipmentId'] = $shipmentId;

        return $this;
    }

    /**
     * Gets labelImage
     *
     * @return string
     */
    public function getLabelImage()
    {
        return $this->container['labelImage'];
    }

    /**
     * Sets labelImage
     *
     * @param string $labelImage Label Image<br />Depends on Label Image Format<br />            <br />**PDF**<br />Base 64 encoded PDF<br />            <br />**PNG**<br />Base 64 encoded PNG<br />            <br />**ZPL 300 / 203 dpi**<br />Base 64 encoded PRN (text file)<br />            <br />**Data stream**<br />Not Included
     *
     * @return $this
     */
    public function setLabelImage($labelImage)
    {
        $this->container['labelImage'] = $labelImage;

        return $this;
    }

    /**
     * Gets labelImageFormat
     *
     * @return string
     */
    public function getLabelImageFormat()
    {
        return $this->container['labelImageFormat'];
    }

    /**
     * Sets labelImageFormat
     *
     * @param string $labelImageFormat Label Image Format
     *
     * @return $this
     */
    public function setLabelImageFormat($labelImageFormat)
    {
        $allowedValues = $this->getLabelImageFormatAllowableValues();
        if (!is_null($labelImageFormat) && !in_array($labelImageFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'labelImageFormat', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['labelImageFormat'] = $labelImageFormat;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber Shipment Tracking Number<br />Final Mile carrier tracking number
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets uniqueId
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['uniqueId'];
    }

    /**
     * Sets uniqueId
     *
     * @param string $uniqueId Unique Shipment ID
     *
     * @return $this
     */
    public function setUniqueId($uniqueId)
    {
        $this->container['uniqueId'] = $uniqueId;

        return $this;
    }

    /**
     * Gets trackingUrl
     *
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['trackingUrl'];
    }

    /**
     * Sets trackingUrl
     *
     * @param string $trackingUrl Tracking URL<br />Final Mile Tracking, if available
     *
     * @return $this
     */
    public function setTrackingUrl($trackingUrl)
    {
        $this->container['trackingUrl'] = $trackingUrl;

        return $this;
    }

    /**
     * Gets carrierCode
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrierCode'];
    }

    /**
     * Sets carrierCode
     *
     * @param string $carrierCode Carrier Code<br />The allocated carrier.
     *
     * @return $this
     */
    public function setCarrierCode($carrierCode)
    {
        $this->container['carrierCode'] = $carrierCode;

        return $this;
    }

    /**
     * Gets primary2DBarcodeImage
     *
     * @return string
     */
    public function getPrimary2DBarcodeImage()
    {
        return $this->container['primary2DBarcodeImage'];
    }

    /**
     * Sets primary2DBarcodeImage
     *
     * @param string $primary2DBarcodeImage Primary 2D Barcode Image<br />Only populated for Data Stream response.<br />Base64 Encoded PNG Image of the 2D data matrix barcode.
     *
     * @return $this
     */
    public function setPrimary2DBarcodeImage($primary2DBarcodeImage)
    {
        $this->container['primary2DBarcodeImage'] = $primary2DBarcodeImage;

        return $this;
    }

    /**
     * Gets primary2DBarcodeData
     *
     * @return string
     */
    public function getPrimary2DBarcodeData()
    {
        return $this->container['primary2DBarcodeData'];
    }

    /**
     * Sets primary2DBarcodeData
     *
     * @param string $primary2DBarcodeData Primary 2D Barcode Data - Base 64 Encoded<br />Only populated for Data Stream response.<br />Data required to create your own 2D data matrix barcode. Please decode before use.
     *
     * @return $this
     */
    public function setPrimary2DBarcodeData($primary2DBarcodeData)
    {
        $this->container['primary2DBarcodeData'] = $primary2DBarcodeData;

        return $this;
    }

    /**
     * Gets formattedUniqueId
     *
     * @return string
     */
    public function getFormattedUniqueId()
    {
        return $this->container['formattedUniqueId'];
    }

    /**
     * Sets formattedUniqueId
     *
     * @param string $formattedUniqueId Formatted Unique Id<br />Only populated for Data Stream response.<br />Label for 2D data matrix barcode.
     *
     * @return $this
     */
    public function setFormattedUniqueId($formattedUniqueId)
    {
        $this->container['formattedUniqueId'] = $formattedUniqueId;

        return $this;
    }

    /**
     * Gets highVolumeBarcodeData
     *
     * @return string
     */
    public function getHighVolumeBarcodeData()
    {
        return $this->container['highVolumeBarcodeData'];
    }

    /**
     * Sets highVolumeBarcodeData
     *
     * @param string $highVolumeBarcodeData High Volume Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own High Volume barcode.
     *
     * @return $this
     */
    public function setHighVolumeBarcodeData($highVolumeBarcodeData)
    {
        $this->container['highVolumeBarcodeData'] = $highVolumeBarcodeData;

        return $this;
    }

    /**
     * Gets highVolumeBarcodeImage
     *
     * @return string
     */
    public function getHighVolumeBarcodeImage()
    {
        return $this->container['highVolumeBarcodeImage'];
    }

    /**
     * Sets highVolumeBarcodeImage
     *
     * @param string $highVolumeBarcodeImage High Volume Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the High Volume barcode.
     *
     * @return $this
     */
    public function setHighVolumeBarcodeImage($highVolumeBarcodeImage)
    {
        $this->container['highVolumeBarcodeImage'] = $highVolumeBarcodeImage;

        return $this;
    }

    /**
     * Gets highVolumeSortCode
     *
     * @return string
     */
    public function getHighVolumeSortCode()
    {
        return $this->container['highVolumeSortCode'];
    }

    /**
     * Sets highVolumeSortCode
     *
     * @param string $highVolumeSortCode High Volume Sort Code<br />Only populated for Data Stream response where the service requires the sort code on the label.
     *
     * @return $this
     */
    public function setHighVolumeSortCode($highVolumeSortCode)
    {
        $this->container['highVolumeSortCode'] = $highVolumeSortCode;

        return $this;
    }

    /**
     * Gets primary1DBarcodeData
     *
     * @return string
     */
    public function getPrimary1DBarcodeData()
    {
        return $this->container['primary1DBarcodeData'];
    }

    /**
     * Sets primary1DBarcodeData
     *
     * @param string $primary1DBarcodeData Primary 1D Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own 1D barcode.
     *
     * @return $this
     */
    public function setPrimary1DBarcodeData($primary1DBarcodeData)
    {
        $this->container['primary1DBarcodeData'] = $primary1DBarcodeData;

        return $this;
    }

    /**
     * Gets primary1DBarcodeImage
     *
     * @return string
     */
    public function getPrimary1DBarcodeImage()
    {
        return $this->container['primary1DBarcodeImage'];
    }

    /**
     * Sets primary1DBarcodeImage
     *
     * @param string $primary1DBarcodeImage Primary 1D Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the 1D barcode.
     *
     * @return $this
     */
    public function setPrimary1DBarcodeImage($primary1DBarcodeImage)
    {
        $this->container['primary1DBarcodeImage'] = $primary1DBarcodeImage;

        return $this;
    }

    /**
     * Gets returnLabelImageFormat
     *
     * @return string
     */
    public function getReturnLabelImageFormat()
    {
        return $this->container['returnLabelImageFormat'];
    }

    /**
     * Sets returnLabelImageFormat
     *
     * @param string $returnLabelImageFormat Return Label Image Format
     *
     * @return $this
     */
    public function setReturnLabelImageFormat($returnLabelImageFormat)
    {
        $allowedValues = $this->getReturnLabelImageFormatAllowableValues();
        if (!is_null($returnLabelImageFormat) && !in_array($returnLabelImageFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'returnLabelImageFormat', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['returnLabelImageFormat'] = $returnLabelImageFormat;

        return $this;
    }

    /**
     * Gets returnLabelImage
     *
     * @return string
     */
    public function getReturnLabelImage()
    {
        return $this->container['returnLabelImage'];
    }

    /**
     * Sets returnLabelImage
     *
     * @param string $returnLabelImage Return Label Image<br />Any return label that have been created as a result of the request and label option settings.<br />Depends on ReturnLabelImageFormat.<br />            <br />**PDF**<br />Base 64 encoded PDF<br />            <br />**PNG**<br />Base 64 encoded PNG<br />            <br />**ZPL 300 / 203 dpi**<br />Base 64 encoded PRN (text file)
     *
     * @return $this
     */
    public function setReturnLabelImage($returnLabelImage)
    {
        $this->container['returnLabelImage'] = $returnLabelImage;

        return $this;
    }

    /**
     * Gets httpStatusCode
     *
     * @return int
     */
    public function getHttpStatusCode()
    {
        return $this->container['httpStatusCode'];
    }

    /**
     * Sets httpStatusCode
     *
     * @param int $httpStatusCode HTTP Status Code
     *
     * @return $this
     */
    public function setHttpStatusCode($httpStatusCode)
    {
        $this->container['httpStatusCode'] = $httpStatusCode;

        return $this;
    }

    /**
     * Gets httpStatusDescription
     *
     * @return string
     */
    public function getHttpStatusDescription()
    {
        return $this->container['httpStatusDescription'];
    }

    /**
     * Sets httpStatusDescription
     *
     * @param string $httpStatusDescription HTTP Status Description
     *
     * @return $this
     */
    public function setHttpStatusDescription($httpStatusDescription)
    {
        $this->container['httpStatusDescription'] = $httpStatusDescription;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message<br />Successful response may include a success message.<br />Failure responses will have general reason as to why. Further details may be contained in the list of errors.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \RoyalMail\Shipping\Rest\Api\models\ErrorDetail[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \RoyalMail\Shipping\Rest\Api\models\ErrorDetail[] $errors Errors<br />Details about why a request failed.
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
