<?php
/**
 * CreateShipmentCustomsInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\Shipping\Rest\Api\models;

use \ArrayAccess;
use \RoyalMail\Shipping\Rest\Api\ObjectSerializer;

/**
 * CreateShipmentCustomsInformation Class Doc Comment
 *
 * @category Class
 * @description Extra customs information not already part of Shipment Information.
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateShipmentCustomsInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateShipment.CustomsInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'preRegistrationNumber' => 'string',
'preRegistrationType' => 'string',
'shippingCharges' => 'double',
'otherCharges' => 'double',
'quotedLandedCost' => 'double',
'invoiceNumber' => 'string',
'invoiceDate' => '\DateTime',
'exportLicence' => 'bool',
'addresseeIdentificationReferenceNumber' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'preRegistrationNumber' => null,
'preRegistrationType' => null,
'shippingCharges' => 'double',
'otherCharges' => 'double',
'quotedLandedCost' => 'double',
'invoiceNumber' => null,
'invoiceDate' => 'date-time',
'exportLicence' => null,
'addresseeIdentificationReferenceNumber' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'preRegistrationNumber' => 'PreRegistrationNumber',
'preRegistrationType' => 'PreRegistrationType',
'shippingCharges' => 'ShippingCharges',
'otherCharges' => 'OtherCharges',
'quotedLandedCost' => 'QuotedLandedCost',
'invoiceNumber' => 'InvoiceNumber',
'invoiceDate' => 'InvoiceDate',
'exportLicence' => 'ExportLicence',
'addresseeIdentificationReferenceNumber' => 'AddresseeIdentificationReferenceNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'preRegistrationNumber' => 'setPreRegistrationNumber',
'preRegistrationType' => 'setPreRegistrationType',
'shippingCharges' => 'setShippingCharges',
'otherCharges' => 'setOtherCharges',
'quotedLandedCost' => 'setQuotedLandedCost',
'invoiceNumber' => 'setInvoiceNumber',
'invoiceDate' => 'setInvoiceDate',
'exportLicence' => 'setExportLicence',
'addresseeIdentificationReferenceNumber' => 'setAddresseeIdentificationReferenceNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'preRegistrationNumber' => 'getPreRegistrationNumber',
'preRegistrationType' => 'getPreRegistrationType',
'shippingCharges' => 'getShippingCharges',
'otherCharges' => 'getOtherCharges',
'quotedLandedCost' => 'getQuotedLandedCost',
'invoiceNumber' => 'getInvoiceNumber',
'invoiceDate' => 'getInvoiceDate',
'exportLicence' => 'getExportLicence',
'addresseeIdentificationReferenceNumber' => 'getAddresseeIdentificationReferenceNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['preRegistrationNumber'] = isset($data['preRegistrationNumber']) ? $data['preRegistrationNumber'] : null;
        $this->container['preRegistrationType'] = isset($data['preRegistrationType']) ? $data['preRegistrationType'] : null;
        $this->container['shippingCharges'] = isset($data['shippingCharges']) ? $data['shippingCharges'] : null;
        $this->container['otherCharges'] = isset($data['otherCharges']) ? $data['otherCharges'] : null;
        $this->container['quotedLandedCost'] = isset($data['quotedLandedCost']) ? $data['quotedLandedCost'] : null;
        $this->container['invoiceNumber'] = isset($data['invoiceNumber']) ? $data['invoiceNumber'] : null;
        $this->container['invoiceDate'] = isset($data['invoiceDate']) ? $data['invoiceDate'] : null;
        $this->container['exportLicence'] = isset($data['exportLicence']) ? $data['exportLicence'] : null;
        $this->container['addresseeIdentificationReferenceNumber'] = isset($data['addresseeIdentificationReferenceNumber']) ? $data['addresseeIdentificationReferenceNumber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets preRegistrationNumber
     *
     * @return string
     */
    public function getPreRegistrationNumber()
    {
        return $this->container['preRegistrationNumber'];
    }

    /**
     * Sets preRegistrationNumber
     *
     * @param string $preRegistrationNumber A pre-registration number is only relevant if the INCOTERMS (International Commercial Terms) for the shipment are DDP (Delivery duty paid).<br /><br />If not provided, and the INCOTERMS are set to DDP, any pre-registration numbers set up via your Customs Settings will be used.
     *
     * @return $this
     */
    public function setPreRegistrationNumber($preRegistrationNumber)
    {
        $this->container['preRegistrationNumber'] = $preRegistrationNumber;

        return $this;
    }

    /**
     * Gets preRegistrationType
     *
     * @return string
     */
    public function getPreRegistrationType()
    {
        return $this->container['preRegistrationType'];
    }

    /**
     * Sets preRegistrationType
     *
     * @param string $preRegistrationType The type of pre-registration number provided above. <br />Required if a pre-registration number has been provided.<br />Ignored if there is no pre-registration number.
     *
     * @return $this
     */
    public function setPreRegistrationType($preRegistrationType)
    {
        $this->container['preRegistrationType'] = $preRegistrationType;

        return $this;
    }

    /**
     * Gets shippingCharges
     *
     * @return double
     */
    public function getShippingCharges()
    {
        return $this->container['shippingCharges'];
    }

    /**
     * Sets shippingCharges
     *
     * @param double $shippingCharges Shipping Charges for International Shipments.<br />The postage amount paid by your customer. The amount can be 0.00 if you have offered your customer free delivery. <br />Used for the calculation of customs fees.<br /><br />*The amount should be in the currency specified in the ShipmentInformation/Currency field.*
     *
     * @return $this
     */
    public function setShippingCharges($shippingCharges)
    {
        $this->container['shippingCharges'] = $shippingCharges;

        return $this;
    }

    /**
     * Gets otherCharges
     *
     * @return double
     */
    public function getOtherCharges()
    {
        return $this->container['otherCharges'];
    }

    /**
     * Sets otherCharges
     *
     * @param double $otherCharges Insurance and Other Costs for International Shipments.<br />If you have charged your customer an additional surcharge such as insurance, you must declare the amount here. <br />This field can be left blank, or be 0.00 if no other charges have been levied.<br /><br />*Any value should be in the currency specified in the ShipmentInformation/Currency field.*
     *
     * @return $this
     */
    public function setOtherCharges($otherCharges)
    {
        $this->container['otherCharges'] = $otherCharges;

        return $this;
    }

    /**
     * Gets quotedLandedCost
     *
     * @return double
     */
    public function getQuotedLandedCost()
    {
        return $this->container['quotedLandedCost'];
    }

    /**
     * Sets quotedLandedCost
     *
     * @param double $quotedLandedCost Quoted Landed Cost<br />This will be the Value of Tax and Duties due to be paid for via the purchaser to the merchant relevant to international sales of goods.<br /><br />*Any value should be in the currency specified in the ShipmentInformation/Currency field.*
     *
     * @return $this
     */
    public function setQuotedLandedCost($quotedLandedCost)
    {
        $this->container['quotedLandedCost'] = $quotedLandedCost;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string $invoiceNumber Commercial Invoice Number for International Shipments.<br />When sending an item to an overseas address and a commercial invoice is available the Invoice Number and Date should be provided where possible. This supports customs processing in certain circumstances.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets invoiceDate
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoiceDate'];
    }

    /**
     * Sets invoiceDate
     *
     * @param \DateTime $invoiceDate Commercial Invoice Date - YYYY-MM-DD.<br />Required when a commercial invoice number is provided.<br />Ignored if no Invoice Number provided.
     *
     * @return $this
     */
    public function setInvoiceDate($invoiceDate)
    {
        $this->container['invoiceDate'] = $invoiceDate;

        return $this;
    }

    /**
     * Gets exportLicence
     *
     * @return bool
     */
    public function getExportLicence()
    {
        return $this->container['exportLicence'];
    }

    /**
     * Sets exportLicence
     *
     * @param bool $exportLicence Export Licence Required.<br />Customers exporting items requiring an export licence must flag the item as requiring an export licence here. This requirement is restricted to exporters of specific type of goods used predominantly for military purposes, as such will probably not apply to you. You can find out more about the type of items requiring an export licence on the UK Government website.<br /><br />If an export licence is required, it should be affixed to the outside of your parcel.
     *
     * @return $this
     */
    public function setExportLicence($exportLicence)
    {
        $this->container['exportLicence'] = $exportLicence;

        return $this;
    }

    /**
     * Gets addresseeIdentificationReferenceNumber
     *
     * @return string
     */
    public function getAddresseeIdentificationReferenceNumber()
    {
        return $this->container['addresseeIdentificationReferenceNumber'];
    }

    /**
     * Sets addresseeIdentificationReferenceNumber
     *
     * @param string $addresseeIdentificationReferenceNumber Addressee Identification Reference Number (previously \"recipients purchasing ID\").<br />Recipient Purchasing IDs for International Shipments. <br />A small number of countries require their citizens to obtain a registration number before importing goods from overseas. When exporting items to countries with such a scheme in place there is a requirement to provide the recipients registration details to customs authorities.
     *
     * @return $this
     */
    public function setAddresseeIdentificationReferenceNumber($addresseeIdentificationReferenceNumber)
    {
        $this->container['addresseeIdentificationReferenceNumber'] = $addresseeIdentificationReferenceNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
